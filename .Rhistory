int <- aov(logRT.mean ~ (Fix*Congruent)+Error(Subno/(Fix*Congruent)), data = f.wide)
summary(int)  #displays Type 1 ANOVA, will be different from Type 3 ANOVA when unbalanced design
f.wide= melt(tapply(mast.dat$logRT, INDEX=list(mast.dat$Fix, mast.dat$Congruent, mast.dat$WordValence,
mast.dat$FaceRace, mast.dat$Subno),
FUN= mean))
f.wide = rename(f.wide, c("Var1" = "Fix", "Var2" = "Congruent",
"Var3" = "WordValence", "Var4" = "FaceRace",
"Var3" = "Subno", "value" = "logRT.mean"))
#for within subjects ANOVAs, SUBJECT HAS TO BE A FACTOR
f.wide = rename(f.wide, c("Var1" = "Fix", "Var2" = "Congruent",
"Var3" = "WordValence", "Var4" = "FaceRace",
"Var5" = "Subno", "value" = "logRT.mean"))
View(f.wide)
f.wide$Subno = as.factor(f.wide$Subno)
int <- aov(logRT.mean ~ (Fix*WordValence*FaceRace)+Error(Subno/(Fix*WordValence*FaceRace)), data = f.wide)
summary(int)  #displays Type 1 ANOVA, will be different from Type 3 ANOVA when unbalanced design
f.wide.eyes = f.wide[f.wide$Fix == "eyes",]
int.eyes <- aov(logRT.mean ~ (Congruent)+Error(Subno/(Congruent)), data = f.wide.eyes)
summary(int.eyes)
f.wide.eyes = f.wide[f.wide$Fix == "eyes",]
int.eyes <- aov(logRT.mean ~ (FaceRace*WordValence)+Error(Subno/(FaceRace*WordValence)), data = f.wide.eyes)
summary(int.eyes)
require(plyr)
require(reshape2)
dat = read.delim("TotalCombinedDat.txt")
fall = dat[dat$Term == "fall",]
mast.dat = fall[fall$Fix != "nose",]
f.wide= melt(tapply(mast.dat$logRT, INDEX=list(mast.dat$Fix, mast.dat$Congruent, mast.dat$WordValence,
mast.dat$FaceRace, mast.dat$Subno),
FUN= mean))
f.wide = rename(f.wide, c("Var1" = "Fix", "Var2" = "Congruent",
"Var3" = "WordValence", "Var4" = "FaceRace",
"Var5" = "Subno", "value" = "logRT.mean"))
View(f.wide)
View(mast.dat)
head(mast.dat)
mast.dat = fall[fall$Fix != "nose",]
f.wide= melt(tapply(mast.dat$logRT, INDEX=list(mast.dat$Fix, mast.dat$Congruent, mast.dat$WordValence,
mast.dat$FaceRace, mast.dat$Subno),
FUN= mean))
View(f.wide)
View(mast.dat)
tapply(mast.dat)
tapply(mast.dat, INDEX=mast.dat$Fix)
tapply(mast.dat$Subno, INDEX=mast.dat$Fix)
tapply(mast.dat$Subno, INDEX=mast.dat$Fix, FUN = sum)
head(fall)
dat$Fix
fall$Fix = as.string(fall$Fix)
as.character?
?
?as.character
?as.factor
??as.character
fall$Fix = as.character(fall$Fix)
mast.dat = fall[fall$Fix != "nose",]
f.wide= melt(tapply(mast.dat$logRT, INDEX=list(mast.dat$Fix, mast.dat$Congruent, mast.dat$WordValence,
mast.dat$FaceRace, mast.dat$Subno),
FUN= mean))
f.wide = rename(f.wide, c("Var1" = "Fix", "Var2" = "Congruent",
"Var3" = "WordValence", "Var4" = "FaceRace",
"Var5" = "Subno", "value" = "logRT.mean"))
View(f.wide)
f.wide= melt(tapply(mast.dat$logRT, INDEX=list(mast.dat$Fix, mast.dat$Congruent, mast.dat$WordValence,
mast.dat$FaceRace, mast.dat$Subno),
FUN= count))
f.wide= melt(tapply(mast.dat$logRT, INDEX=list(mast.dat$Fix, mast.dat$Congruent, mast.dat$WordValence,
mast.dat$FaceRace, mast.dat$Subno),
FUN= sum))
View(f.wide)
mast.dat = fall[fall$Fix != "nose",]
(mast.dat)
head(mast.dat)
summary(mast.dat$Fix)
f.wide= melt(tapply(mast.dat$logRT, INDEX=list(mast.dat$Fix, mast.dat$Congruent, #mast.dat$WordValence,
#mast.dat$FaceRace,
mast.dat$Subno),
FUN= mean))
View(mast.dat)
View(f.wide)
f.wide = rename(f.wide, c("Var1" = "Fix", "Var2" = "Congruent",
#"Var3" = "WordValence", "Var4" = "FaceRace",
"Var3" = "Subno", "value" = "logRT.mean"))
f.wide = rename(f.wide, c("Var1" = "Fix", "Var2" = "Congruent",
View(f.wide)
f.wide$Subno = as.factor(f.wide$Subno)
int <- aov(logRT.mean ~ (Fix*Congruent)+Error(Subno/(Fix*Congruent)), data = f.wide)
summary(int)  #displays Type 1 ANOVA, will be different from Type 3 ANOVA when unbalanced design
f.wide.eyes = f.wide[f.wide$Fix == "eyes",]
int.eyes <- aov(logRT.mean ~ (Congruent)+Error(Subno/(Congruent)), data = f.wide.eyes)
summary(int.eyes)
View(f.wide.eyes)
int <- aov(logRT.mean ~ (Fix*Congruent)+Error(Subno/(Fix*Congruent)), data = f.wide)
summary(int)  #displays Type 1 ANOVA, will be different from Type 3 ANOVA when unbalanced design
f.wide.eyes = f.wide[f.wide$Fix == "eyes",]
int.eyes <- aov(logRT.mean ~ (Congruent)+Error(Subno/(Congruent)), data = f.wide.eyes)
summary(int.eyes)
f.wide2.eyes = f.wide2[f.wide2$Fix == "eyes",]
int2.eyes <- aov(logRT.mean ~ (Congruent)+Error(Subno/(Congruent)), data = f.wide2.eyes)
f.wide2.eyes = f.wide[f.wide$Fix == "eyes",]
int2.eyes <- aov(logRT.mean ~ (Congruent)+Error(Subno/(Congruent)), data = f.wide2.eyes)
summary(int2.eyes)
f.wide2.eyes
t.test(x=f.wide2.eyes$logRT.mean[f.wide2.eyes$Congruent=="Con"],
y=f.wide2.eyes$logRT.mean[f.wide2.eyes$Congruent=="Incon"])
summary(int2.eyes)
dat = read.delim("TotalCombinedDat.txt")
# split into spring and fall data
spring = dat[dat$Term == "spring",]
fall = dat[dat$Term == "fall",]
# 1. Do 2 x 2 Anova (Fix by Congruence) for fall data (just within eyes and forehead condition)
fall$Fix = as.character(fall$Fix)
mast.dat = fall[fall$Fix != "nose",]
#change format to do ANOVA
#different line for each value (so each variable has a column specifying which level of that variable
#the value is for)
f.wide= melt(tapply(mast.dat$logRT, INDEX=list(mast.dat$Fix, mast.dat$Congruent, #mast.dat$WordValence,
#mast.dat$FaceRace,
mast.dat$Subno),
FUN= mean))
f.wide = rename(f.wide, c("Var1" = "Fix", "Var2" = "Congruent",
#"Var3" = "WordValence", "Var4" = "FaceRace",
"Var3" = "Subno", "value" = "logRT.mean"))
require(plyr)
require(reshape2)
dat = read.delim("TotalCombinedDat.txt")
# split into spring and fall data
spring = dat[dat$Term == "spring",]
fall = dat[dat$Term == "fall",]
# 1. Do 2 x 2 Anova (Fix by Congruence) for fall data (just within eyes and forehead condition)
fall$Fix = as.character(fall$Fix)
mast.dat = fall[fall$Fix != "nose",]
#change format to do ANOVA
#different line for each value (so each variable has a column specifying which level of that variable
#the value is for)
f.wide= melt(tapply(mast.dat$logRT, INDEX=list(mast.dat$Fix, mast.dat$Congruent, #mast.dat$WordValence,
#mast.dat$FaceRace,
mast.dat$Subno),
FUN= mean))
f.wide = rename(f.wide, c("Var1" = "Fix", "Var2" = "Congruent",
#"Var3" = "WordValence", "Var4" = "FaceRace",
"Var3" = "Subno", "value" = "logRT.mean"))
View(f.wide)
require(tidyr)
?spread
spread(f.wide, Subno)
spread(f.wide, f.wide$Subno)
head(f.wide)
spread(f.wide, Congruent)
spread(f.wide, Congruent, Subno)
spread(f.wide, Congruent, logRT)
spread(f.wide, Subno, logRT)
spread(f.wide, Subno, logRT)
class(f.wide)
class(head(f.wide))
spread(f.wide, Subno, logRT, fill = NA)
spread(f.wide, Congruent, logRT)
f.wide
spread(f.wide, Congruent, logRT.mean)
spread1 = spread(f.wide, Congruent, logRT.mean)
spread2 = spread(spread1, Fix, logRT.mean)
spread2 = spread(spread1, Fix, Con)
spread2
head(spread1)
spread1
write.table
?write.table
write.table(spread1, file = "DataForBruce.txt")
write.table(spread1, file = "DataForBruce.txt", sep = "/t")
write.table(spread1, file = "DataForBruce.txt", sep = "\t")
write.table(spread1, file = "DataForBruce.txt", sep = "\t", row.names = F)
dat = read.delim("Block2dat.txt", stringsAsFactors=F)
qplot(RT, data = dat, geom = "histogram", binwidth = 15)
??qplot
require(ggplot2)
qplot(RT, data = dat, geom = "histogram", binwidth = 15)
dat$logRT = NULL
for (i in 1:length(row.names(dat))) {
dat$logRT[i] = log(dat$RT[i])
}
# still looks skewed
qplot(logRT, data = dat, geom = "histogram", binwidth = .05)
qplot(logRT, data = dat[dat$Subno == 109,], geom = "histogram", binwidth = .05)
highCount = data.frame(NULL)
for (i in unique(dat$Subno)) {
subdat = dat[dat$Subno == i,]
#create cut off
cutoff = mean(subdat$logRT) + 3*(sd(subdat$logRT))
# count up number above cutoff
NumHigh = sum(subdat$logRT > cutoff)
highCount = rbind(highCount, data.frame("Subno" = subdat$Subno[1],
"Mean" = mean(subdat$logRT),
"Cutoff" = cutoff,
"NumHigh" = NumHigh))
}
# Winsorize logRTs (input mean + 3*SD for values that are higher than that)
dat$logRT.winz = dat$logRT
for (i in unique(dat$Subno)) {
subdat = dat[dat$Subno == i,]
#create cut off
cutoff = mean(subdat$logRT) + 3*(sd(subdat$logRT))
dat$logRT.winz[dat$Subno == i & dat$logRT > cutoff] = cutoff
}
# looks more normal
qplot(logRT, data = dat, geom = "histogram", binwidth = .05)
qplot(logRT.winz, data = dat, geom = "histogram", binwidth = .05)
qplot(RT.winz, data = dat, geom = "histogram", binwidth = 15)
dat$RT.winz = dat$RT
for (i in unique(dat$Subno)) {
subdat = dat[dat$Subno == i,]
#create cut off
cutoff = mean(subdat$RT) + 3*(sd(subdat$RT))
dat$RT.winz[dat$Subno == i & dat$RT > cutoff] = cutoff
}
# looks more normal
qplot(RT.winz, data = dat, geom = "histogram", binwidth = 15)
qplot(RT, data = dat, geom = "histogram", binwidth = 15)
qplot(RT, data = dat, geom = "histogram", binwidth =20)
qplot(RT, data = dat, geom = "histogram", binwidth = 10)
qplot(RT, data = dat, geom = "histogram", binwidth = 5)
qplot(RT, data = dat, geom = "histogram", binwidth = 30)
qplot(RT, data = dat, geom = "histogram", binwidth = 50)
qplot(RT, data = dat, geom = "histogram", binwidth = 100)
qplot(RT, data = dat, geom = "histogram", binwidth = 10)
qplot(logRT, data = dat, geom = "histogram", binwidth = .05)
qplot(RT.winz, data = dat, geom = "histogram", binwidth = 15)
qplot(logRT.winz, data = dat, geom = "histogram", binwidth = .05)
dat = read.delim("TotalCombinedDat.txt")
# split into spring and fall data
spring = dat[dat$Term == "spring",]
fall = dat[dat$Term == "fall",]
# 1. Do 2 x 2 Anova (Fix by Congruence) for fall data (just within eyes and forehead condition)
fall$Fix = as.character(fall$Fix)
mast.dat = fall[fall$Fix != "nose",]
View(mast.dat)
log.winz = melt(tapply(mast.dat$logRT.winz, INDEX=list(mast.dat$Fix, mast.dat$Congruent, #mast.dat$WordValence,
#mast.dat$FaceRace,
mast.dat$Subno),
FUN= mean))
require(reshape2)
log.winz = melt(tapply(mast.dat$logRT.winz, INDEX=list(mast.dat$Fix, mast.dat$Congruent, #mast.dat$WordValence,
#mast.dat$FaceRace,
mast.dat$Subno),
FUN= mean))
log.winz = rename(log.winz, c("Var1" = "Fix", "Var2" = "Congruent",
#"Var3" = "WordValence", "Var4" = "FaceRace",
"Var3" = "Subno", "value" = "logRT.winz.mean"))
#for within subjects ANOVAs, SUBJECT HAS TO BE A FACTOR
log.winz$Subno = as.factor(log.winz$Subno)
require(plyr)
log.winz = rename(log.winz, c("Var1" = "Fix", "Var2" = "Congruent",
#"Var3" = "WordValence", "Var4" = "FaceRace",
"Var3" = "Subno", "value" = "logRT.winz.mean"))
head(log.winz)
int <- aov(logRT.winz.mean ~ (Fix*Congruent)+Error(Subno/(Fix*Congruent)), data = log.winz)
summary(int)  #displays Type 1 ANOVA, will be different from Type 3 ANOVA when unbalanced design
log.winz.eyes = log.winz[log.winz$Fix == "eyes",]
int <- aov(logRT.winz.mean ~ (Fix*Congruent)+Error(Subno/(Fix*Congruent)), data = log.winz.eyes)
View(log.winz.eyes)
int <- aov(logRT.winz.mean ~ (Congruent)+Error(Subno/(Congruent)), data = log.winz.eyes)
summary(int)  #displays Type 1 ANOVA, will be different from Type 3 ANOVA when unbalanced design
log.winz.fore = log.winz[log.winz$Fix == "forehead",]
int <- aov(logRT.winz.mean ~ (Congruent)+Error(Subno/(Congruent)), data = log.winz.fore)
summary(int)  #displays Type 1 ANOVA, will be different from Type 3 ANOVA when unbalanced design
log.winz.eyes = log.winz[log.winz$Fix == "eyes",]
int <- aov(logRT.winz.mean ~ (Congruent)+Error(Subno/(Congruent)), data = log.winz.eyes)
summary(int)  #displays Type 1 ANOVA, will be different from Type 3 ANOVA when unbalanced design
require(plyr)
require(reshape2)
# read in data
dat = read.delim("TotalCombinedDat.txt")
# split into spring and fall data
spring = dat[dat$Term == "spring",]
fall = dat[dat$Term == "fall",]
# 1. Do 2 x 2 Anova (Fix by Congruence) for fall data (just within eyes and forehead condition)
fall$Fix = as.character(fall$Fix)
mast.dat = fall[fall$Fix != "nose",]
#change format to do ANOVA
#different line for each value (so each variable has a column specifying which level of that variable
#the value is for)
f.wide= melt(tapply(mast.dat$logRT, INDEX=list(mast.dat$Fix, mast.dat$Congruent, #mast.dat$WordValence,
#mast.dat$FaceRace,
mast.dat$Subno),
FUN= mean))
f.wide = rename(f.wide, c("Var1" = "Fix", "Var2" = "Congruent",
#"Var3" = "WordValence", "Var4" = "FaceRace",
"Var3" = "Subno", "value" = "logRT.mean"))
#for within subjects ANOVAs, SUBJECT HAS TO BE A FACTOR
f.wide$Subno = as.factor(f.wide$Subno)
# create anova model
int <- aov(logRT.mean ~ (Fix*Congruent)+Error(Subno/(Fix*Congruent)), data = f.wide)
summary(int)  #displays Type 1 ANOVA, will be different from Type 3 ANOVA when unbalanced design
sink("./Output/FallANOVA_MastersAnalysis.txt", append=F)
"ANOVA of fall data (9.2.2015)"
"Code in Analysis_combinedDat.R"
"Doesn't include two bad subjects or fast trials (<50 ms)"
"Analysis done with log transformed RTs"
"Only includes eye and forehead conditions"
"------------------------------------------------------------------"
"OMNIBUS (Fix x Congruent)"
summary(int)
sink()
# 2. Do specific tests of effect of congruence within Fix conditions
# already done, in FallANOVA_PrimingBlockAnalysis.txt
# in FYP_FallSpringCombined --> Output
# 3. Do the same thing with t-tests, just to make sure I'm doing it right
# (1) T-test of congruence within eye condition
f.wide2.eyes = f.wide[f.wide$Fix == "eyes",]
# ANOVA
int2.eyes <- aov(logRT.mean ~ (Congruent)+Error(Subno/(Congruent)), data = f.wide2.eyes)
summary(int2.eyes)
# T-test
t.test(x=f.wide2.eyes$logRT.mean[f.wide2.eyes$Congruent=="Con"],
y=f.wide2.eyes$logRT.mean[f.wide2.eyes$Congruent=="Incon"])
# 4. Reshape data to send to Bruce
require(tidyr)
spread1 = spread(f.wide, Congruent, logRT.mean)
spread1 = rename(spread1, c("Con" = "Fix", "Var2" = "Congruent",
#"Var3" = "WordValence", "Var4" = "FaceRace",
"Var3" = "Subno", "value" = "logRT.mean"))
write.table(spread1, file = "DataForBruce.txt", sep = "\t", row.names = F)
# in excel, moved forehead up so that each subject was on one line
# 5. Try analyzing logRT.winz
# Create wide version of logRT.winz data
log.winz = melt(tapply(mast.dat$logRT.winz, INDEX=list(mast.dat$Fix, mast.dat$Congruent, #mast.dat$WordValence,
#mast.dat$FaceRace,
mast.dat$Subno),
FUN= mean))
log.winz = rename(log.winz, c("Var1" = "Fix", "Var2" = "Congruent",
#"Var3" = "WordValence", "Var4" = "FaceRace",
"Var3" = "Subno", "value" = "logRT.winz.mean"))
#for within subjects ANOVAs, SUBJECT HAS TO BE A FACTOR
log.winz$Subno = as.factor(log.winz$Subno)
# create anova model for full interaction term
int <- aov(logRT.winz.mean ~ (Fix*Congruent)+Error(Subno/(Fix*Congruent)), data = log.winz)
summary(int)  #displays Type 1 ANOVA, will be different from Type 3 ANOVA when unbalanced design
# just within eyes
log.winz.eyes = log.winz[log.winz$Fix == "eyes",]
int <- aov(logRT.winz.mean ~ (Congruent)+Error(Subno/(Congruent)), data = log.winz.eyes)
summary(int)  #displays Type 1 ANOVA, will be different from Type 3 ANOVA when unbalanced design
# just within forehead
log.winz.fore = log.winz[log.winz$Fix == "forehead",]
int <- aov(logRT.winz.mean ~ (Congruent)+Error(Subno/(Congruent)), data = log.winz.fore)
summary(int)  #displays Type 1 ANOVA, will be different from Type 3 ANOVA when unbalanced design
rep(1:60, each=1)
sample(v)
v = rep(1:60, each=1)
sample(v)
?sample
sample(v, size = 30)
primeList1 = sample(v, size = 30)
primeList1
sort(primeList1)
count(primeList1)
as.dataframe(sort(primeList1))
write.table?
write.table??
dataframe(1,sort(primeList1))
data.frame(1,sort(primeList1))
data1 = data.frame(1,sort(primeList1))
source('~/.active-rstudio-document')
??rename
require(dplyr)
data1 = rename(data1, sort.primeList1 = Num)
data1 = rename(data1, num = sort.primeList1)
names(data1)
data1 = rename(data1, num = sort.primeList1.)
names(data1)
data1$Race = "Black"
head(data1)
data1$filename = ".jpg"
data1 = data1[,c(X1, Race, num, filename)]
data1 = data1[,c(data1$X1, data1$Race, data1$num, data1$filename)]
data1 = data1[,c("filename", "Race")]
View(data1)
data1 = data1[,c("Race", "num","filename")]
data1 = data.frame(1,sort(primeList1))
data1 = rename(data1, num = sort.primeList1.)
data1$Race = "Black"
data1$filename = ".jpg"
data1 = data1[,c("Race", "num","filename")]
View(dat1)
View(data1)
unite(data1, "Race", "num", "filename")
require(tidyr)
unite(data1, "Race", "num", "filename")
unite(data1, Race, num, filename)
??unite
data1 = unite(data1, col, c(Race, num, filename))
view(data1)
View(data1)
data1 = unite(data1, col, c(Race, num, filename), sep = "")
data1 = data.frame(1,sort(primeList1))
data1 = rename(data1, num = sort.primeList1.)
data1$Race = "Black"
data1$filename = ".jpg"
data1 = data1[,c("Race", "num","filename")]
data1 = unite(data1, col, c(Race, num, filename), sep = "")
View(data1)
v60[-primeList1]
primeList1
sort(primeList1)
require(magrittr)
primeTemp = sample(v60, size = 30) %>%
sort()
primeTemp
primeTemp = sample(v60, size = 30)
primeTemp
primeTemp = sample(v60, size = 30) %>%
sort()
primeTemp
primeTemp = sample(v60, size = 30) %>%
sort() %>%
data.frame(1,.)
primeTemp
primeTemp = sample(v60, size = 30) %>%
sort() %>%
data.frame(1,.) %>%
rename(num = .)
primeTemp = sample(v60, size = 30) %>%
sort() %>%
data.frame(1,.)
names(primeTemp)
rename(primeTemp, num = .)
primeTemp = sample(v60, size = 30) %>%
sort() %>%
data.frame(1,.)
rename(primeTemp, num = .)
primeTemp$Race = "Black"
primeTemp$Filename = ".jpg"
primeTemp = unite(primeTemp,col, c(Race, num, filename), sep = "")
primeTemp = sample(v60, size = 30) %>%
sort() %>%
data.frame(1,.)
rename(primeTemp, num = .)
primeTemp$Race = "Black"
primeTemp$Filename = ".jpg"
names(primeTemp)
primeTemp = sample(v60, size = 30) %>%
sort() %>%
data.frame(1,.)
primeTemp$Race = "Black"
primeTemp$Filename = ".jpg"
primeTemp = rename(primeTemp, num = .) %>%
unite(col, c(Race, num, filename), sep = "")
primeTemp = rename(primeTemp, num = .) %>%
unite(col, c(Race, num, Filename), sep = "")
primeTemp
primeTemp = sample(v60, size = 30) %>%
sort() %>%
data.frame(1,.)
primeTemp$Race = "Black"
primeTemp$Filename = ".jpg"
primeTemp = rename(primeTemp, num = .) %>%
unite(col, c(Race, num, Filename), sep = "") >%>
primeTemp = rename(primeTemp, num = .) %>%
unite(col, c(Race, num, Filename), sep = "") %>%
write.table(file = primeFilename, sep = "\t", row.names = FALSE)
primeFileName = paste("primeList", i, ".txt", sep="") # make filename. Paste() combines strings together.
for (i in 1:4) {
primeFileName = paste("primeList", i, ".txt", sep="") # make filename. Paste() combines strings together.
primeTemp = sample(v60, size = 30) %>%
sort() %>%
data.frame(1,.)
primeTemp$Race = "Black"
primeTemp$Filename = ".jpg"
primeTemp = rename(primeTemp, num = .) %>%
unite(col, c(Race, num, Filename), sep = "") %>%
write.table(file = primeFilename, sep = "\t", row.names = FALSE)
}
primeFileName = paste("primeList", i, ".txt", sep="") # make filename. Paste() combines strings together.
primeFileName
i = 1
primeFileName = paste("primeList", i, ".txt", sep="") # make filename. Paste() combines strings together.
primeTemp = sample(v60, size = 30) %>%
sort() %>%
data.frame(1,.)
primeTemp$Race = "Black"
primeTemp$Filename = ".jpg"
primeTemp = rename(primeTemp, num = .) %>%
unite(col, c(Race, num, Filename), sep = "") %>%
write.table(file = primeFilename, sep = "\t", row.names = FALSE)
primeFilename
primeFilename = paste("primeList", i, ".txt", sep="") # make filename. Paste() combines strings together.
primeTemp = sample(v60, size = 30) %>%
sort() %>%
data.frame(1,.)
primeTemp$Race = "Black"
primeTemp$Filename = ".jpg"
primeTemp = rename(primeTemp, num = .) %>%
unite(col, c(Race, num, Filename), sep = "") %>%
write.table(file = primeFilename, sep = "\t", row.names = FALSE)
require(tidyr)
require(dplyr)
# read in data
dat = read.delim("TotalCombinedDat.txt")
# split into spring and fall data
spring = dat[dat$Term == "spring",]
fall = dat[dat$Term == "fall",]
View(fall)
fall2 = summarize(group_by(fall, Fix, Subno), logRT = mean(logRT))
flat = spread(fall2, Fix, logRT)
View(flat)
View(fall2)
contr1 = c(.5, .5, -1)
xc1=cbind(flat$eyes, flat$forehead, flat$nose)%*% contr1
aov1=aov(xc1~1)
summary(aov1,intercept=T)
contr1 = c(1, 0, -1)
xc1=cbind(flat$eyes, flat$forehead, flat$nose)%*% contr1
aov1=aov(xc1~1)
summary(aov1,intercept=T)
