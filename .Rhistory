formatting +
scale_fill_manual("WordValence", values = c("Neg" = "brown", "Pos" = "lightblue")) +
ggtitle("FaceRace x WordValence x Fix (correct trials, logRT): Spring")
ggplot(corSpring, aes(FaceRace, logRT, fill = WordValence)) +
stat_summary(fun.y = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=.9), width = .2) +
facet_wrap(~Fix) +
coord_cartesian(ylim=c(6,6.4)) +
formatting +
scale_fill_manual("WordValence", values = c("Neg" = "brown", "Pos" = "lightblue")) +
ggtitle("FaceRace x WordValence x Fix (correct trials, logRT): Spring")
ggplot(corSpring, aes(FaceRace, logRT, fill = WordValence)) +
stat_summary(fun.y = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=.9), width = .2) +
facet_wrap(~Fix) +
coord_cartesian(ylim=c(6,6.2)) +
formatting +
scale_fill_manual("WordValence", values = c("Neg" = "brown", "Pos" = "lightblue")) +
ggtitle("FaceRace x WordValence x Fix (correct trials, logRT): Spring")
ggplot(corSpring, aes(FaceRace, logRT, fill = WordValence)) +
stat_summary(fun.y = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=.9), width = .2) +
facet_wrap(~Fix) +
coord_cartesian(ylim=c(6.2,6.4)) +
formatting +
scale_fill_manual("WordValence", values = c("Neg" = "brown", "Pos" = "lightblue")) +
ggtitle("FaceRace x WordValence x Fix (correct trials, logRT): Spring")
ggplot(corSpring, aes(Fix, RT, fill = Congruent)) +
stat_summary(fun.y = mean, geom = "bar", position = "dodge", geom_width = .1) +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=.9), width = .2) +
coord_cartesian(ylim=c(500,600)) +
formatting +
labs(x ="Fixation", y = "Reaction Time") +
theme(plot.title = element_blank()) +
scale_fill_manual("Congruent", values = c("Con" = "brown", "Incon" = "lightblue")) +
ggtitle("Congruent x Fix (correct trials, raw RT): Spring")
ggplot(corSpring, aes(Fix, RT, fill = Congruent)) +
stat_summary(fun.y = mean, geom = "bar", position = "dodge", geom_width = .1) +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=.9), width = .2) +
coord_cartesian(ylim=c(525,575)) +
formatting +
labs(x ="Fixation", y = "Reaction Time") +
theme(plot.title = element_blank()) +
scale_fill_manual("Congruent", values = c("Con" = "brown", "Incon" = "lightblue")) +
ggtitle("Congruent x Fix (correct trials, raw RT): Spring")
ggplot(corFall, aes(Fix, RT, fill = Congruent)) +
stat_summary(fun.y = mean, geom = "bar", position = "dodge", geom_width = .1) +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=.9), width = .2) +
coord_cartesian(ylim=c(650,750)) +
formatting +
labs(x ="Fixation", y = "Reaction Time") +
theme(plot.title = element_blank()) +
scale_fill_manual("Congruent", values = c("Con" = "brown", "Incon" = "lightblue")) +
ggtitle("Congruent x Fix (correct trials, raw RT): Fall")
ggplot(corFall, aes(FaceRace, RT, fill = WordValence)) +
stat_summary(fun.y = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=.9), width = .2) +
facet_wrap(~Fix) +
coord_cartesian(ylim=c(550,775)) +
formatting +
scale_fill_manual("WordValence", values = c("Neg" = "brown", "Pos" = "lightblue")) +
ggtitle("FaceRace x WordValence x Fix (correct trials, raw RT): Fall")
ggplot(corFall, aes(FaceRace, RT, fill = WordValence)) +
stat_summary(fun.y = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=.9), width = .2) +
facet_wrap(~Fix) +
coord_cartesian(ylim=c(600,775)) +
formatting +
scale_fill_manual("WordValence", values = c("Neg" = "brown", "Pos" = "lightblue")) +
ggtitle("FaceRace x WordValence x Fix (correct trials, raw RT): Fall")
ggplot(corSpring, aes(FaceRace, RT, fill = WordValence)) +
stat_summary(fun.y = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=.9), width = .2) +
facet_wrap(~Fix) +
coord_cartesian(ylim=c(500,600)) +
formatting +
scale_fill_manual("WordValence", values = c("Neg" = "brown", "Pos" = "lightblue")) +
ggtitle("FaceRace x WordValence x Fix (correct trials, raw RT): Spring")
ggplot(corSpring, aes(FaceRace, RT, fill = WordValence)) +
stat_summary(fun.y = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=.9), width = .2) +
facet_wrap(~Fix) +
coord_cartesian(ylim=c(475,650)) +
formatting +
scale_fill_manual("WordValence", values = c("Neg" = "brown", "Pos" = "lightblue")) +
ggtitle("FaceRace x WordValence x Fix (correct trials, raw RT): Spring")
ggplot(corSpring, aes(Fix, RT, fill = Congruent)) +
stat_summary(fun.y = mean, geom = "bar", position = "dodge", geom_width = .1) +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=.9), width = .2) +
coord_cartesian(ylim=c(525,575)) +
formatting +
labs(x ="Fixation", y = "Reaction Time") +
theme(plot.title = element_blank()) +
scale_fill_manual("Congruent", values = c("Con" = "brown", "Incon" = "lightblue")) +
ggtitle("Congruent x Fix (correct trials, raw RT): Spring")
ggplot(corSpring, aes(Fix, RT, fill = Congruent)) +
stat_summary(fun.y = mean, geom = "bar", position = "dodge", geom_width = .1) +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=.9), width = .2) +
coord_cartesian(ylim=c(525,625)) +
formatting +
labs(x ="Fixation", y = "Reaction Time") +
theme(plot.title = element_blank()) +
scale_fill_manual("Congruent", values = c("Con" = "brown", "Incon" = "lightblue")) +
ggtitle("Congruent x Fix (correct trials, raw RT): Spring")
ggplot(corSpring, aes(Fix, RT, fill = Congruent)) +
stat_summary(fun.y = mean, geom = "bar", position = "dodge", geom_width = .1) +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=.9), width = .2) +
coord_cartesian(ylim=c(525,625)) +
formatting +
labs(x ="Fixation", y = "Reaction Time") +
theme(plot.title = element_blank()) +
scale_fill_manual("Congruent", values = c("Con" = "darkgreen", "Incon" = "lightpurple")) +
ggtitle("Congruent x Fix (correct trials, raw RT): Spring")
ggplot(corSpring, aes(Fix, RT, fill = Congruent)) +
stat_summary(fun.y = mean, geom = "bar", position = "dodge", geom_width = .1) +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=.9), width = .2) +
coord_cartesian(ylim=c(525,625)) +
formatting +
labs(x ="Fixation", y = "Reaction Time") +
theme(plot.title = element_blank()) +
scale_fill_manual("Congruent", values = c("Con" = "darkgreen", "Incon" = "plum")) +
ggtitle("Congruent x Fix (correct trials, raw RT): Spring")
ggplot(corSpring, aes(FaceRace, RT, fill = WordValence)) +
stat_summary(fun.y = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=.9), width = .2) +
facet_wrap(~Fix) +
coord_cartesian(ylim=c(475,650)) +
formatting +
scale_fill_manual("WordValence", values = c("Neg" = "darkgreen", "Pos" = "plum")) +
ggtitle("FaceRace x WordValence x Fix (correct trials, raw RT): Spring")
ggplot(corFall, aes(Fix, RT, fill = Congruent)) +
stat_summary(fun.y = mean, geom = "bar", position = "dodge", geom_width = .1) +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=.9), width = .2) +
coord_cartesian(ylim=c(650,750)) +
formatting +
labs(x ="Fixation", y = "Reaction Time") +
theme(plot.title = element_blank()) +
scale_fill_manual("Congruent", values = c("Con" = "darkgreen", "Incon" = "plum")) +
ggtitle("Congruent x Fix (correct trials, raw RT): Fall")
ggplot(corFall, aes(FaceRace, RT, fill = WordValence)) +
stat_summary(fun.y = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=.9), width = .2) +
facet_wrap(~Fix) +
coord_cartesian(ylim=c(600,775)) +
formatting +
scale_fill_manual("WordValence", values = c("Neg" = "brown", "Pos" = "lightblue")) +
ggtitle("FaceRace x WordValence x Fix (correct trials, raw RT): Fall")
ggplot(corSpring, aes(FaceRace, RT, fill = WordValence)) +
stat_summary(fun.y = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=.9), width = .2) +
facet_wrap(~Fix) +
coord_cartesian(ylim=c(475,650)) +
formatting +
scale_fill_manual("WordValence", values = c("Neg" = "brown", "Pos" = "lightblue")) +
ggtitle("FaceRace x WordValence x Fix (correct trials, raw RT): Spring")
ggplot(corFall, aes(FaceRace, RT, fill = WordValence)) +
stat_summary(fun.y = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=.9), width = .2) +
facet_wrap(~Fix) +
coord_cartesian(ylim=c(600,775)) +
formatting +
scale_fill_manual("WordValence", values = c("Neg" = "brown", "Pos" = "lightblue")) +
ggtitle("FaceRace x WordValence x Fix (correct trials, raw RT): Fall")
ggplot(corFall, aes(Fix, RT, fill = Congruent)) +
stat_summary(fun.y = mean, geom = "bar", position = "dodge", geom_width = .1) +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=.9), width = .2) +
coord_cartesian(ylim=c(650,750)) +
formatting +
labs(x ="Fixation", y = "Reaction Time") +
theme(plot.title = element_blank()) +
scale_fill_manual("Congruent", values = c("Con" = "darkgreen", "Incon" = "plum")) +
ggtitle("Congruent x Fix (correct trials, raw RT): Fall")
ggplot(corFall, aes(Fix, RT, fill = Congruent)) +
stat_summary(fun.y = mean, geom = "bar", position = "dodge", geom_width = .01) +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=.9), width = .2) +
coord_cartesian(ylim=c(650,750)) +
formatting +
labs(x ="Fixation", y = "Reaction Time") +
theme(plot.title = element_blank()) +
scale_fill_manual("Congruent", values = c("Con" = "darkgreen", "Incon" = "plum")) +
ggtitle("Congruent x Fix (correct trials, raw RT): Fall")
ggplot(corFall, aes(Fix, RT, fill = Congruent)) +
stat_summary(fun.y = mean, geom = "bar", position = "dodge", geom_width = .00001) +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=.9), width = .2) +
coord_cartesian(ylim=c(650,750)) +
formatting +
labs(x ="Fixation", y = "Reaction Time") +
theme(plot.title = element_blank()) +
scale_fill_manual("Congruent", values = c("Con" = "darkgreen", "Incon" = "plum")) +
ggtitle("Congruent x Fix (correct trials, raw RT): Fall")
ggplot(corFall, aes(Fix, RT, fill = Congruent)) +
stat_summary(fun.y = mean, geom = "bar", position = "dodge", bar_width = .1) +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=.9), width = .2) +
coord_cartesian(ylim=c(650,750)) +
formatting +
labs(x ="Fixation", y = "Reaction Time") +
theme(plot.title = element_blank()) +
scale_fill_manual("Congruent", values = c("Con" = "darkgreen", "Incon" = "plum")) +
ggtitle("Congruent x Fix (correct trials, raw RT): Fall")
ggplot(corSpring, aes(FaceRace, RT, fill = WordValence)) +
stat_summary(fun.y = mean, geom = "bar", position = "dodge") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=.9), width = .2) +
facet_wrap(~Fix) +
coord_cartesian(ylim=c(475,650)) +
formatting +
scale_fill_manual("WordValence", values = c("Neg" = "brown", "Pos" = "lightblue")) +
ggtitle("FaceRace x WordValence x Fix (correct trials, raw RT): Spring")
ggplot(corSpring, aes(Fix, RT, fill = Congruent)) +
stat_summary(fun.y = mean, geom = "bar", position = "dodge", geom_width = .1) +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position = position_dodge(width=.9), width = .2) +
coord_cartesian(ylim=c(525,625)) +
formatting +
labs(x ="Fixation", y = "Reaction Time") +
theme(plot.title = element_blank()) +
scale_fill_manual("Congruent", values = c("Con" = "darkgreen", "Incon" = "plum")) +
ggtitle("Congruent x Fix (correct trials, raw RT): Spring")
dat = read.delim("TotalCombinedDat.txt")
dat = read.delim("TotalCombinedDat.txt")
View(dat)
spring = dat[dat$Term == "spring",]
fall = dat[dat$Term == "fall",]
require(plyr)
require(reshape2)
f.wide= melt(tapply(fall$logRT, INDEX=list(fall$Fix, fall$Race, fall$Congruent, fall$Subnum),
FUN= mean))
head(fall)
f.wide= melt(tapply(fall$logRT, INDEX=list(fall$Fix, fall$FaceRace, fall$Congruent, fall$Subno),
FUN= mean))
View(f.wide)
f.wide = rename(wide, c("Var1" = "Fix", "Var2" = "FaceRace",
"Var3" = "Congruent", "Var4" = "Subno", "value" = "logRT.mean"))
f.wide = rename(f.wide, c("Var1" = "Fix", "Var2" = "FaceRace",
"Var3" = "Congruent", "Var4" = "Subno", "value" = "logRT.mean"))
#for within subjects ANOVAs, SUBJECT HAS TO BE A FACTOR
f.wide$Subno = as.factor(f.wide$Subno)
int <- aov(RT ~ (Fix*FaceRace*Congruent)+Error(Subno/(Fix*FaceRace*Congruent)), data = f.wide)
int <- aov(logRT.mean ~ (Fix*FaceRace*Congruent)+Error(Subno/(Fix*FaceRace*Congruent)), data = f.wide)
summary(int)  #displays Type 1 ANOVA, will be different from Type 3 ANOVA when unbalanced design
sort(unique(fall$RT))
print(summary(int))
?sink
sink("FallANOVA_PrimingBlock.txt", append=T)
# ANOVA of fall data
# Doesn't include two bad subjects
# fast trials eliminated (<50 ms)
# OMNIBUS (FaceRace x WordValence x Fix)
"ANOVA of fall data"
"Doesn't include two bad subjects or fast trials (<50 ms)"
"OMNIBUS (FaceRace x WordValence x Fix)"
summary(int)
sink()
eyes = f.wide[f.wide$Fix == "eyes",]
f.wide.eyes = f.wide[f.wide$Fix == "eyes",]
int.eyes <- aov(logRT.mean ~ (FaceRace*Congruent)+Error(Subno/(FaceRace*Congruent)), data = f.wide.eyes)
summary(int.eyes)
sink("FallANOVA_PrimingBlock.txt", append=F)
"ANOVA of fall data (5.1.2015)"
"Code in Analysis_combinedDat.R"
"Doesn't include two bad subjects or fast trials (<50 ms)"
"OMNIBUS (FaceRace x WordValence x Fix)"
summary(int)
sink()
sink("FallANOVA_PrimingBlock.txt", append=T)
"Specific contrast: (FaceRace x WordValence with Eyes condition)"
summary(int.eyes)
sink()
sink("FallANOVA_PrimingBlock.txt", append=F)
"ANOVA of fall data (5.1.2015)"
"Code in Analysis_combinedDat.R"
"Doesn't include two bad subjects or fast trials (<50 ms)"
"OMNIBUS (FaceRace x WordValence x Fix)"
summary(int)
sink()
sink("FallANOVA_PrimingBlock.txt", append=T)
"\n \n \n"
"Specific contrast: (FaceRace x WordValence with Eyes condition)"
summary(int.eyes)
sink()
sink("FallANOVA_PrimingBlock.txt", append=F)
"ANOVA of fall data (5.1.2015)"
"Code in Analysis_combinedDat.R"
"Doesn't include two bad subjects or fast trials (<50 ms)"
"OMNIBUS (FaceRace x WordValence x Fix)"
summary(int)
sink()
sink("FallANOVA_PrimingBlock.txt", append=T)
\n \n
"Specific contrast: (FaceRace x WordValence with Eyes condition)"
summary(int.eyes)
sink()
sink("FallANOVA_PrimingBlock.txt", append=F)
"ANOVA of fall data (5.1.2015)"
"Code in Analysis_combinedDat.R"
"Doesn't include two bad subjects or fast trials (<50 ms)"
"OMNIBUS (FaceRace x WordValence x Fix)"
summary(int)
sink()
sink("FallANOVA_PrimingBlock.txt", append=T)
"------------------------------------------------------------------"
"Specific contrast: (FaceRace x WordValence with Eyes condition)"
summary(int.eyes)
sink()
sink("FallANOVA_PrimingBlock.txt", append=F)
"ANOVA of fall data (5.1.2015)"
"Code in Analysis_combinedDat.R"
"Doesn't include two bad subjects or fast trials (<50 ms)"
"------------------------------------------------------------------"
"OMNIBUS (FaceRace x WordValence x Fix)"
summary(int)
sink()
sink("FallANOVA_PrimingBlock.txt", append=T)
"------------------------------------------------------------------"
"Specific contrast: (FaceRace x WordValence with Eyes condition)"
summary(int.eyes)
sink()
f.wide.fore = f.wide[f.wide$Fix == "forehead",]
int.fore <- aov(logRT.mean ~ (FaceRace*Congruent)+Error(Subno/(FaceRace*Congruent)), data = f.wide.fore)
summary(int.eyes)
View(f.wide.fore)
f.wide= melt(tapply(fall$logRT, INDEX=list(fall$Fix, fall$FaceRace, fall$Congruent, fall$WordValence, fall$Subno),
FUN= mean))
head(f.wide)
View(f.wide)
f.wide= melt(tapply(fall$logRT, INDEX=list(fall$Fix, fall$FaceRace, fall$WordValence, fall$Subno),
FUN= mean))
f.wide= melt(tapply(fall$logRT, INDEX=list(fall$Fix, fall$FaceRace, fall$WordValence, fall$Subno),
View(f.wide)
f.wide = rename(f.wide, c("Var1" = "Fix", "Var2" = "FaceRace",
"Var3" = "WordValence", "Var4" = "Subno", "value" = "logRT.mean"))
View(f.wide)
f.wide$Subno = as.factor(f.wide$Subno)
int <- aov(logRT.mean ~ (Fix*FaceRace*WordValence)+Error(Subno/(Fix*FaceRace*WordValence)), data = f.wide)
summary(int)  #displays Type 1 ANOVA, will be different from Type 3 ANOVA when unbalanced design
sink("FallANOVA_PrimingBlock.txt", append=F)
"ANOVA of fall data (5.1.2015)"
"Code in Analysis_combinedDat.R"
"Doesn't include two bad subjects or fast trials (<50 ms)"
"------------------------------------------------------------------"
"OMNIBUS (FaceRace x WordValence x Fix)"
summary(int)
sink()
f.wide.eyes = f.wide[f.wide$Fix == "eyes",]
int.eyes <- aov(logRT.mean ~ (FaceRace*WordValence)+Error(Subno/(FaceRace*WordValence)), data = f.wide.eyes)
summary(int.eyes)
sink("FallANOVA_PrimingBlock.txt", append=T)
"------------------------------------------------------------------"
"Specific contrast: (FaceRace x WordValence with Eyes condition)"
summary(int.eyes)
sink()
f.wide.fore = f.wide[f.wide$Fix == "forehead",]
int.fore <- aov(logRT.mean ~ (FaceRace*Congruent)+Error(Subno/(FaceRace*Congruent)), data = f.wide.fore)
f.wide.fore = f.wide[f.wide$Fix == "forehead",]
int.fore <- aov(logRT.mean ~ (FaceRace*WordValence)+Error(Subno/(FaceRace*WordValence)), data = f.wide.fore)
summary(int.fore)
sink("FallANOVA_PrimingBlock.txt", append=T)
"------------------------------------------------------------------"
"Specific contrast: (FaceRace x WordValence with Forehead condition)"
summary(int.fore)
sink()
f.wide.nose = f.wide[f.wide$Fix == "nose",]
int.nose <- aov(logRT.mean ~ (FaceRace*WordValence)+Error(Subno/(FaceRace*WordValence)), data = f.wide.nose)
summary(int.nose)
sink("FallANOVA_PrimingBlock.txt", append=T)
"------------------------------------------------------------------"
"Specific contrast: (FaceRace x WordValence with Nose condition)"
summary(int.nose)
sink()
f.wide2= melt(tapply(fall$logRT, INDEX=list(fall$Fix, fall$Congruent, fall$Subno),
FUN= mean))
View(f.wide2)
f.wide2 = rename(f.wide, c("Var1" = "Fix", "Var2" = "Congruent",
"Var3" = "Subno", "value" = "logRT.mean"))
f.wide2 = rename(f.wide2, c("Var1" = "Fix", "Var2" = "Congruent",
"Var3" = "Subno", "value" = "logRT.mean"))
View(f.wide2)
f.wide2= melt(tapply(fall$logRT, INDEX=list(fall$Fix, fall$Congruent, fall$Subno),
FUN= mean))
f.wide2 = rename(f.wide2, c("Var1" = "Fix", "Var2" = "Congruent",
"Var3" = "Subno", "value" = "logRT.mean"))
class(f.wide2$Subno)
f.wide2$Subno = as.factor(f.wide2$Subno)
int <- aov(logRT.mean ~ (Fix*Congruent)+Error(Subno/(Fix*Congruent)), data = f.wide2)
summary(int)  #displays Type 1 ANOVA, will be different from Type 3 ANOVA when unbalanced design
sink("FallANOVA_PrimingBlock.txt", append=F)
"------------------------------------------------------------------"
"------------------------------------------------------------------"
"OMNIBUS (Congruent x Fix)"
summary(int)
sink()
f.wide2.eyes = f.wide2[f.wide2$Fix == "eyes",]
int2.eyes <- aov(logRT.mean ~ (FaceRace*Congruent)+Error(Subno/(FaceRace*Congruent)), data = f.wide2.eyes)
summary(int2.eyes)
int2.eyes <- aov(logRT.mean ~ (Congruent)+Error(Subno/(Congruent)), data = f.wide2.eyes)
summary(int2.eyes)
dat = read.delim("TotalCombinedDat.txt")
# split into spring and fall data
spring = dat[dat$Term == "spring",]
fall = dat[dat$Term == "fall",]
# 1. Recreate fall analyses first (use log transformed data)
# (1) Omnibus ANOVA (FaceRace x WordValence x Fix)
#change format to do ANOVA
#different line for each value (so each variable has a column specifying which level of that variable
#the value is for)
f.wide= melt(tapply(fall$logRT, INDEX=list(fall$Fix, fall$FaceRace, fall$WordValence, fall$Subno),
FUN= mean))
f.wide = rename(f.wide, c("Var1" = "Fix", "Var2" = "FaceRace",
"Var3" = "WordValence", "Var4" = "Subno", "value" = "logRT.mean"))
#for within subjects ANOVAs, SUBJECT HAS TO BE A FACTOR
f.wide$Subno = as.factor(f.wide$Subno)
# create anova model
int <- aov(logRT.mean ~ (Fix*FaceRace*WordValence)+Error(Subno/(Fix*FaceRace*WordValence)), data = f.wide)
summary(int)  #displays Type 1 ANOVA, will be different from Type 3 ANOVA when unbalanced design
sink("FallANOVA_PrimingBlock.txt", append=F)
"ANOVA of fall data (5.1.2015)"
"Code in Analysis_combinedDat.R"
"Doesn't include two bad subjects or fast trials (<50 ms)"
"------------------------------------------------------------------"
"OMNIBUS (FaceRace x WordValence x Fix)"
summary(int)
sink()
# Specific contrasts
# FaceRace x WordValence within eye condition
f.wide.eyes = f.wide[f.wide$Fix == "eyes",]
int.eyes <- aov(logRT.mean ~ (FaceRace*WordValence)+Error(Subno/(FaceRace*WordValence)), data = f.wide.eyes)
summary(int.eyes)
sink("FallANOVA_PrimingBlock.txt", append=T)
"------------------------------------------------------------------"
"Specific contrast: (FaceRace x WordValence with Eyes condition)"
summary(int.eyes)
sink()
# FaceRace x WordValence within forehead condition
f.wide.fore = f.wide[f.wide$Fix == "forehead",]
int.fore <- aov(logRT.mean ~ (FaceRace*WordValence)+Error(Subno/(FaceRace*WordValence)), data = f.wide.fore)
summary(int.fore)
sink("FallANOVA_PrimingBlock.txt", append=T)
"------------------------------------------------------------------"
"Specific contrast: (FaceRace x WordValence with Forehead condition)"
summary(int.fore)
sink()
# FaceRace x WordValence within nose condition
f.wide.nose = f.wide[f.wide$Fix == "nose",]
int.nose <- aov(logRT.mean ~ (FaceRace*WordValence)+Error(Subno/(FaceRace*WordValence)), data = f.wide.nose)
summary(int.nose)
sink("FallANOVA_PrimingBlock.txt", append=T)
"------------------------------------------------------------------"
"Specific contrast: (FaceRace x WordValence with Nose condition)"
summary(int.nose)
sink()
# (2) Omnibus ANOVA (Congruent x Fix)
#change format to do ANOVA
#different line for each value (so each variable has a column specifying which level of that variable
#the value is for)
f.wide2= melt(tapply(fall$logRT, INDEX=list(fall$Fix, fall$Congruent, fall$Subno),
FUN= mean))
f.wide2 = rename(f.wide2, c("Var1" = "Fix", "Var2" = "Congruent",
"Var3" = "Subno", "value" = "logRT.mean"))
#for within subjects ANOVAs, SUBJECT HAS TO BE A FACTOR
f.wide2$Subno = as.factor(f.wide2$Subno)
# create anova model
int <- aov(logRT.mean ~ (Fix*Congruent)+Error(Subno/(Fix*Congruent)), data = f.wide2)
summary(int)  #displays Type 1 ANOVA, will be different from Type 3 ANOVA when unbalanced design
sink("FallANOVA_PrimingBlock.txt", append=T)
"------------------------------------------------------------------"
"------------------------------------------------------------------"
"OMNIBUS (Congruent x Fix)"
summary(int)
sink()
# Specific contrasts
# Congruence within eye condition
f.wide2.eyes = f.wide2[f.wide2$Fix == "eyes",]
int2.eyes <- aov(logRT.mean ~ (Congruent)+Error(Subno/(Congruent)), data = f.wide2.eyes)
summary(int2.eyes)
sink("FallANOVA_PrimingBlock.txt", append=T)
"------------------------------------------------------------------"
"Specific contrast: (Congruent within Eyes condition)"
summary(int2.eyes)
sink()
# Congruence within forehead condition
f.wide2.fore = f.wide2[f.wide2$Fix == "forehead",]
int2.fore <- aov(logRT.mean ~ (Congruent)+Error(Subno/(Congruent)), data = f.wide2.fore)
summary(int2.fore)
sink("FallANOVA_PrimingBlock.txt", append=T)
"------------------------------------------------------------------"
"Specific contrast: (Congruent within Forehead condition)"
summary(int2.fore)
sink()
# Congruence within nose condition
f.wide2.nose = f.wide2[f.wide2$Fix == "nose",]
int2.nose <- aov(logRT.mean ~ (Congruent)+Error(Subno/(Congruent)), data = f.wide2.nose)
summary(int2.nose)
sink("FallANOVA_PrimingBlock.txt", append=T)
"------------------------------------------------------------------"
"Specific contrast: (Congruent within Nose condition)"
summary(int2.nose)
sink()
s.wide= melt(tapply(spring$logRT, INDEX=list(spring$Fix, spring$FaceRace, spring$WordValence, spring$Subno),
FUN= mean))
s.wide = rename(s.wide, c("Var1" = "Fix", "Var2" = "FaceRace",
"Var3" = "WordValence", "Var4" = "Subno", "value" = "logRT.mean"))
View(s.wide)
s.wide$Subno = as.factor(s.wide$Subno)
s.wide$Subno = as.factor(s.wide$Subno)
s.int <- aov(logRT.mean ~ (Fix*FaceRace*WordValence)+Error(Subno/(Fix*FaceRace*WordValence)), data = s.wide)
summary(s.int)  #displays Type 1 ANOVA, will be different from Type 3 ANOVA when unbalanced design
sink("SpringANOVA_PrimingBlock.txt", append=F)
"ANOVA of spring data (5.1.2015)"
"Code in Analysis_combinedDat.R"
"Includes all subjects, analysis done on log transformed RTs"
"------------------------------------------------------------------"
"OMNIBUS (FaceRace x WordValence x Fix)"
summary(s.int)
sink()
